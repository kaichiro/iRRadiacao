/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.CEPEnderecoCTRL;
import controller.ClienteCTRL;
import controller.EntradaProdutoCTRL;
import controller.FornecedorCTRL;
import controller.InversorCTRL;
import controller.IrradiacaoGlobalMesCTRL;
import controller.ModuloCTRL;
import controller.ProjetoCTRL;
import controller.UsuarioCTRL;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import model.bean.CEPEndereco;
import model.bean.Cliente;
import model.bean.EntradaProduto;
import model.bean.Fornecedor;
import model.bean.Inversor;
import model.bean.IrradiacaoGlobalMes;
import model.bean.Modulo;
import model.bean.Projeto;
import model.bean.Usuario;

/**
 *
 * @author KAI
 */
public final class DlgPesquisaEntidade extends javax.swing.JDialog {

    private Class classe;
    private String[] camposPesquisaCombo;
    private String[] colunasJTable;
    private boolean firstRun = true;

    public int IdSelecionado = 0;
    private boolean ReturnIdObj;

    /**
     * Creates new form DlgPesquisaEntidade
     *
     * @param parent
     * @param modal
     */
    public DlgPesquisaEntidade(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setIcon();
    }

    /**
     *
     * @param parent setar null
     * @param modal setar true
     * @param classe setar a classe, ex.: Cliente.class
     * @param camposPesquisaCombo opcional e será descontinuado
     * @param colunasJTable opcional e será descontinuado
     * @param pRetornarObjeto true = retorna objeto, false = apenas abre obj
     */
    public DlgPesquisaEntidade(java.awt.Frame parent, boolean modal,
            Class classe,
            String[] camposPesquisaCombo,
            String[] colunasJTable,
            boolean pRetornarObjeto
    ) {
        super(parent, modal);
        this.setClasse(classe);
        initComponents();
        this.setCamposPesquisaCombo(camposPesquisaCombo);
        this.setColunasJTable(colunasJTable);
        this.ReturnIdObj = pRetornarObjeto;
        this.IniciaForm();
        this.setFirstRun(false);
        setIcon();
    }

    private void setIcon() {
        this.setIconImage(new ImageIcon(getClass().getResource("/image/specialist-user.png")).getImage());
    }

    public Class getClasse() {
        return classe;
    }

    public void setClasse(Class classe) {
        this.classe = classe;
    }

    public String[] getCamposPesquisaCombo() {
        return camposPesquisaCombo;
    }

    public void setCamposPesquisaCombo(String[] camposPesquisaCombo) {
        this.camposPesquisaCombo = camposPesquisaCombo;
    }

    public String[] getColunasJTable() {
        return colunasJTable;
    }

    public void setColunasJTable(String[] colunasJTable) {
        this.colunasJTable = colunasJTable;
    }

    public boolean isFirstRun() {
        return firstRun;
    }

    public void setFirstRun(boolean firstRun) {
        this.firstRun = firstRun;
    }

    public int getIdSelecionado() {
        return IdSelecionado;
    }

    public void setIdSelecionado(int IdSelecionado) {
        this.IdSelecionado = IdSelecionado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmnPesquisa = new java.awt.PopupMenu();
        miExcluirObjeto = new java.awt.MenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        spnrLimite = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        cmbxCampoPesquisa = new javax.swing.JComboBox<>();
        txtConteudoPesquisa = new javax.swing.JFormattedTextField();
        btnLocalizar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMain = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        pmnPesquisa.setLabel("popupMenu1");

        miExcluirObjeto.setLabel("menuItem1");
        miExcluirObjeto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExcluirObjetoActionPerformed(evt);
            }
        });
        pmnPesquisa.add(miExcluirObjeto);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pesquisar: ");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Limite:");

        spnrLimite.setModel(new javax.swing.SpinnerNumberModel(20, 1, 10000, 1));

        jLabel2.setText("Campo:");

        cmbxCampoPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtConteudoPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtConteudoPesquisaKeyPressed(evt);
            }
        });

        btnLocalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ícones/Search.18px.png"))); // NOI18N
        btnLocalizar.setText("Localizar");
        btnLocalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnrLimite, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbxCampoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtConteudoPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLocalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spnrLimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbxCampoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConteudoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLocalizar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMain.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMainMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblMainMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMainMouseReleased(evt);
            }
        });
        tblMain.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblMainKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblMain);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Dê um duplo cliente com o botão normal do mouse ou tecla ENTER sobre o registro abaixo desejado.");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnLocalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocalizarActionPerformed
        if (this.getClasse().equals(Cliente.class)) {
            this.PopulaJTable_Clientes();
        } else if (this.getClasse().equals(Fornecedor.class)) {
            this.PopulaJTable_Fornecedores();
        } else if (this.getClasse().equals(EntradaProduto.class)) {
            this.PopulaJTable_EntradaProdutos();
        } else if (this.getClasse().equals(Inversor.class)) {
            this.PopulaJTable_Invesores();
        } else if (this.getClasse().equals(Modulo.class)) {
            this.PopulaJTable_Modulos();
        } else if (this.getClasse().equals(Projeto.class)) {
            this.PopulaJTable_Projetos();
        } else if (this.getClasse().equals(CEPEndereco.class)) {
            this.PopulaJTable_CEPEndereco();
        } else if (this.getClasse().equals(IrradiacaoGlobalMes.class)) {
            this.PopulaJTable_IrradiacaoGlobalMes();
        } else if (this.getClasse().equals(Usuario.class)) {
            this.PopulaJTable_Usuario();
        }
    }//GEN-LAST:event_btnLocalizarActionPerformed

    private void tblMainKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMainKeyPressed
        if ((evt.getKeyChar() == KeyEvent.VK_ENTER)) {
            this.ProcessaObjeto();
            evt.consume();
        }
    }//GEN-LAST:event_tblMainKeyPressed

    private void tblMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseClicked
        switch (evt.getButton()) {
            case MouseEvent.BUTTON1:
                if (evt.getClickCount() == 2) {
                    this.ProcessaObjeto();
                }
                break;
//            case MouseEvent.BUTTON2:
//                break;
            case MouseEvent.BUTTON3:
                tblMain.getParent().add(pmnPesquisa);
                int id_ = (int) tblMain.getValueAt(tblMain.getSelectedRow(), 0);
                if (id_ > 0) {
                    miExcluirObjeto.setLabel("Exclir Id (" + id_ + ").");
                    pmnPesquisa.show(tblMain.getParent(), evt.getX(), evt.getY());
                }
                break;
//            default:
//                System.out.println("nenhum botão foi idenditicado");
//            default:
//                System.out.println("nenhum botão foi idenditicado");
        }

    }//GEN-LAST:event_tblMainMouseClicked

    private void tblMainMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMouseReleased
    }//GEN-LAST:event_tblMainMouseReleased

    private void tblMainMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMainMousePressed
    }//GEN-LAST:event_tblMainMousePressed

    private void miExcluirObjetoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExcluirObjetoActionPerformed
        int id_ = (int) tblMain.getValueAt(tblMain.getSelectedRow(), 0);
        if ("Sim".equals(JOptionPane.showInputDialog(null,
                "Caso realmente deseje 'Excluir' o registro de (" + this.getClasse().getSimpleName() + "[" + id_ + "]), digite Sim.",
                "<< ATENÇÃO! >>",
                JOptionPane.YES_NO_OPTION))) {
            if (this.getClasse() == Cliente.class) {
                ClienteCTRL.Excluir(id_);
            } else if (this.getClasse() == Fornecedor.class) {
                FornecedorCTRL.Deletar(id_);
            }
        }
    }//GEN-LAST:event_miExcluirObjetoActionPerformed

    private void txtConteudoPesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConteudoPesquisaKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            this.btnLocalizarActionPerformed(null);
        }
    }//GEN-LAST:event_txtConteudoPesquisaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgPesquisaEntidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DlgPesquisaEntidade dialog = new DlgPesquisaEntidade(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLocalizar;
    private javax.swing.JComboBox<String> cmbxCampoPesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.MenuItem miExcluirObjeto;
    private java.awt.PopupMenu pmnPesquisa;
    private javax.swing.JSpinner spnrLimite;
    private javax.swing.JTable tblMain;
    private javax.swing.JFormattedTextField txtConteudoPesquisa;
    // End of variables declaration//GEN-END:variables

    private void IniciaForm() {
        this.setTitle(this.getTitle().concat(this.getClasse().getSimpleName()));

        btnLocalizar.setMnemonic(KeyEvent.VK_L);

        if (this.getClasse().equals(Cliente.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Nome"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Clientes();
        } else if (this.getClasse().equals(Projeto.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Cliente"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Projetos();
        } else if (this.getClasse().equals(Fornecedor.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Nome"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Fornecedores();
        } else if (this.getClasse().equals(EntradaProduto.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Fornecedor"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_EntradaProdutos();
        } else if (this.getClasse().equals(Inversor.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Modelo"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Invesores();
        } else if (this.getClasse().equals(Modulo.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"Modelo", "Descricao"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Modulos();
        } else if (this.getClasse().equals(CEPEndereco.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = new String[]{"CEP/Logradouro"};
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_CEPEndereco();
        } else if (this.getClasse().equals(IrradiacaoGlobalMes.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = "Latitude,Longitude".split(",");
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_IrradiacaoGlobalMes();
        } else if (this.getClasse().equals(Usuario.class)) {
            cmbxCampoPesquisa.removeAllItems();
            String[] strItem = "Nome,Login,Id".split(",");
            for (String c : strItem) {
                cmbxCampoPesquisa.addItem(c);
            }
            this.PopulaJTable_Usuario();
        }

    }

    private void PopulaJTable_Projetos() {
        List<Projeto> Proj_ = new ArrayList<>();

        String[] colunas = "Id,Cliente,Data,Status".split(",");

        if (!this.isFirstRun()) {
            for (Projeto prj : ProjetoCTRL.BuscarPorCliente((int) spnrLimite.getValue(), txtConteudoPesquisa.getText())) {
                Proj_.add(prj);
            }
        }

        Object[][] dados = new Object[Proj_.size()][colunas.length];
        for (int linha = 0; linha < Proj_.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = Proj_.get(linha).getId();
            dados[linha][coluna++]
                    = Proj_.get(linha).getCliente().getRazaoSocial_Nome().trim().length() > 0
                    ? Proj_.get(linha).getCliente().getRazaoSocial_Nome()
                    : Proj_.get(linha).getCliente().getNomeFantasia_Apelido();
            dados[linha][coluna++] = Proj_.get(linha).getDataCadastro();
            dados[linha][coluna++] = Proj_.get(linha).getStatus().getDescricao();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void ProcessaObjeto() {
        int id = (int) tblMain.getValueAt(tblMain.getSelectedRow(), 0);
        if (id > 0) {
            if (this.getClasse().equals(Cliente.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgClienteNEW1 dlg = new DlgClienteNEW1(null, true, ClienteCTRL.BuscarPorId(0, id, null));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(Fornecedor.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgFornecedor dlg = new DlgFornecedor(null, true, FornecedorCTRL.BuscarPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(EntradaProduto.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgEntradaProduto dlg = new DlgEntradaProduto(null, true, EntradaProdutoCTRL.BuscarPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(Inversor.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgInversorNEW dlg = new DlgInversorNEW(null, true, InversorCTRL.BuscaPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(Modulo.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgModuloNEW dlg = new DlgModuloNEW(null, true, ModuloCTRL.BuscaPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(IrradiacaoGlobalMes.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgIrradiacaoGlobalMesNEW dlg = new DlgIrradiacaoGlobalMesNEW(null, true, IrradiacaoGlobalMesCTRL.BuscarPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(Usuario.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
                } else {
                    DlgUsuarioNEW dlg = new DlgUsuarioNEW(null, true, UsuarioCTRL.BuscarPorId(id));
                    dlg.setVisible(true);
                    dlg.toFront();
                }
            } else if (this.getClasse().equals(CEPEndereco.class)) {
                if (this.ReturnIdObj) {
                    this.setIdSelecionado(id);
                    this.dispose();
//                } else {
//                    DlgModulo dlg = new DlgModulo(null, true);
//                    dlg.setVisible(true);
//                    dlg.toFront();
                }
            } else if (this.getClasse().equals(Projeto.class)) {
                DlgProjetoNew dlg = new DlgProjetoNew(null, true, ProjetoCTRL.BuscarPorId(id));
                dlg.setVisible(true);
                dlg.toFront();
            }
        }
    }

    private void PopulaJTable_Invesores() {
        List<Inversor> inversores = new ArrayList<>();

        String[] colunas = new String[]{"Id", "Modelo", "Status", "Tipo Saída A.C."};

        if (!this.isFirstRun()) {
            if (cmbxCampoPesquisa.getSelectedItem().equals("Modelo")) {
                inversores = InversorCTRL.BuscaPorModelo(txtConteudoPesquisa.getText(), (int) spnrLimite.getValue());
            } else {
                inversores.add(InversorCTRL.BuscaPorId(Integer.parseInt(txtConteudoPesquisa.getText())));
            }
        }

        Object[][] dados = new Object[inversores.size()][colunas.length];
        for (int linha = 0; linha < inversores.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = inversores.get(linha).getId();
            dados[linha][coluna++] = inversores.get(linha).getModelo();
            dados[linha][coluna++] = inversores.get(linha).getStatus();
            dados[linha][coluna++] = inversores.get(linha).getTipoSaidaAC();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tblMain.getColumnModel().getColumn(0).setPreferredWidth((int) (tblMain.getWidth() * 0.04));
        tblMain.getColumnModel().getColumn(1).setPreferredWidth((int) (tblMain.getWidth() * 0.42));
        tblMain.getColumnModel().getColumn(2).setPreferredWidth((int) (tblMain.getWidth() * 0.22));
        tblMain.getColumnModel().getColumn(3).setPreferredWidth((int) (tblMain.getWidth() * 0.22));
    }

    private void PopulaJTable_Modulos() {
        List<Modulo> modulos = new ArrayList<>();

        String[] colunas = new String[]{"Id", "Modelo", "Status", "Descrição"};

        if (!this.isFirstRun()) {
            if (cmbxCampoPesquisa.getSelectedItem().equals("Modelo")) {
                modulos = ModuloCTRL.BuscaPorModelo(txtConteudoPesquisa.getText(), (int) spnrLimite.getValue());
            } else if (cmbxCampoPesquisa.getSelectedItem().equals("Descricao")) {
                modulos = ModuloCTRL.BuscaPorDescricao(txtConteudoPesquisa.getText(), (int) spnrLimite.getValue());
            }
        }

        Object[][] dados = new Object[modulos.size()][colunas.length];
        for (int linha = 0; linha < modulos.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = modulos.get(linha).getId();
            dados[linha][coluna++] = modulos.get(linha).getModelo();
            dados[linha][coluna++] = modulos.get(linha).getStatus();
            dados[linha][coluna++] = modulos.get(linha).getDescricao();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tblMain.getColumnModel().getColumn(0).setPreferredWidth((int) (tblMain.getWidth() * 0.04));
        tblMain.getColumnModel().getColumn(1).setPreferredWidth((int) (tblMain.getWidth() * 0.42));
        tblMain.getColumnModel().getColumn(2).setPreferredWidth((int) (tblMain.getWidth() * 0.22));
        tblMain.getColumnModel().getColumn(3).setPreferredWidth((int) (tblMain.getWidth() * 0.22));
    }

    private void PopulaJTable_Clientes() {
        List<Cliente> clientes = new ArrayList<>();

        String[] colunas = new String[]{"Id", "Razão Social / Nome", "Nome Fantasia / Aplido", "Tipo", "CNPJ / CPF", "Status"};

        if (!this.isFirstRun()) {
            if (cmbxCampoPesquisa.getSelectedItem().equals("Nome")) {
                clientes = ClienteCTRL.BuscarPorNome((int) spnrLimite.getValue(), txtConteudoPesquisa.getText(), null);
            }
        }

        Object[][] dados = new Object[clientes.size()][colunas.length];
        for (int linha = 0; linha < clientes.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = clientes.get(linha).getId();
            dados[linha][coluna++] = clientes.get(linha).getRazaoSocial_Nome();
            dados[linha][coluna++] = clientes.get(linha).getNomeFantasia_Apelido();
            dados[linha][coluna++] = clientes.get(linha).getTipoPessoa().getDescricao().split(" ")[1];
            dados[linha][coluna++] = clientes.get(linha).getCNPJ_CPF();
            dados[linha][coluna++] = clientes.get(linha).getStatus();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int xx = 0;
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.05));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.33));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.20));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.20));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.07));
    }

    private void PopulaJTable_CEPEndereco() {
        List<CEPEndereco> EnderecosCEPs = new ArrayList<>();

        String[] colunas = new String[]{"Id", "CEP", "Logradouro", "Complemento", "Bairro", "Cidade", "UF", "Latitude", "Longitude"};

        if (!this.isFirstRun()) {
            EnderecosCEPs = CEPEnderecoCTRL.BuscarPor_CEP_ou_Logradouro((int) spnrLimite.getValue(), txtConteudoPesquisa.getText());
        }

        Object[][] dados = new Object[EnderecosCEPs.size()][colunas.length];
        for (int linha = 0; linha < EnderecosCEPs.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getId();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getCEP();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getLogradouro();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getComplemento();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getBairro();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getCidade();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getUF();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getLatitude();
            dados[linha][coluna++] = EnderecosCEPs.get(linha).getLongitude();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int xx = 0;
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.05));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
    }

    private void PopulaJTable_IrradiacaoGlobalMes() {
        List<IrradiacaoGlobalMes> IGMs = new ArrayList<>();

        String[] colunas = "Id,Latitude,Longitude,Anual,Primavera,Verao,Outono,Inverno,Ano".split(",");

        if (!this.isFirstRun()) {
            IGMs = IrradiacaoGlobalMesCTRL.BuscarTodos((int) spnrLimite.getValue());
        }

        Object[][] dados = new Object[IGMs.size()][colunas.length];
        for (int linha = 0; linha < IGMs.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = IGMs.get(linha).getId();
            dados[linha][coluna++] = IGMs.get(linha).getLatitude();
            dados[linha][coluna++] = IGMs.get(linha).getLongitude();
            dados[linha][coluna++] = IGMs.get(linha).getAnual();
            dados[linha][coluna++] = IGMs.get(linha).getPrimavera();
            dados[linha][coluna++] = IGMs.get(linha).getVerao();
            dados[linha][coluna++] = IGMs.get(linha).getOutubro();
            dados[linha][coluna++] = IGMs.get(linha).getInverno();
            dados[linha][coluna++] = IGMs.get(linha).getAno();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int xx = 0;
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.05));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.13));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.13));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.10));
    }

    private void PopulaJTable_Usuario() {
        List<Usuario> usuario_ = new ArrayList<>();

        String[] colunas = "Id,Nome,Login,Perfil/Grupo,Status".split(",");

        if (!this.isFirstRun()) {
            if (cmbxCampoPesquisa.getSelectedItem().equals("Id")) {
                usuario_.add(UsuarioCTRL.BuscarPorId(Integer.parseInt(txtConteudoPesquisa.getText())));
            } else if (cmbxCampoPesquisa.getSelectedItem().equals("Login")) {
                usuario_ = UsuarioCTRL.BuscarPorLogin(txtConteudoPesquisa.getText());
            } else if (cmbxCampoPesquisa.getSelectedItem().equals("Nome")) {
                usuario_ = UsuarioCTRL.BuscarPorNome(txtConteudoPesquisa.getText());
            } else {
                usuario_ = UsuarioCTRL.BuscarTodos();
            }
        }

        Object[][] dados = new Object[usuario_.size()][colunas.length];
        for (int linha = 0; linha < usuario_.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = usuario_.get(linha).getId();
            dados[linha][coluna++] = usuario_.get(linha).getNome();
            dados[linha][coluna++] = usuario_.get(linha).getLogin();
            dados[linha][coluna++] = usuario_.get(linha).getPerfilGrupo();
            dados[linha][coluna++] = usuario_.get(linha).getStatus().getDescricao();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        int xx = 0;
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.05));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.35));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.15));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.25));
        tblMain.getColumnModel().getColumn(xx++).setPreferredWidth((int) (tblMain.getParent().getWidth() * 0.15));
    }

    private void PopulaJTable_Fornecedores() {
        List<Fornecedor> fornecedor_ = new ArrayList<>();

        String[] colunas = "Id,Razão Social,Nome Fantasia,CNPJ,Cidade,UF,Status".split(",");

        if (!this.isFirstRun()) {
            FornecedorCTRL.BuscarPorNome((int) spnrLimite.getValue(), txtConteudoPesquisa.getText()).forEach((Fornecedor f__) -> {
                fornecedor_.add(f__);
            });
        }

        Object[][] dados = new Object[fornecedor_.size()][colunas.length];
        for (int linha = 0; linha < fornecedor_.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = fornecedor_.get(linha).getId();
            dados[linha][coluna++] = fornecedor_.get(linha).getRazaoSocial();
            dados[linha][coluna++] = fornecedor_.get(linha).getNomeFantasia();
            dados[linha][coluna++] = fornecedor_.get(linha).getCNPJ();
            dados[linha][coluna++] = fornecedor_.get(linha).getCidade();
            dados[linha][coluna++] = fornecedor_.get(linha).getUF();
            dados[linha][coluna++] = fornecedor_.get(linha).getStatus().getDescricao();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void PopulaJTable_EntradaProdutos() {
        List<EntradaProduto> EP_ = new ArrayList<>();

        String[] colunas = "Id,Data,Fornecedor,CNPJ,Cidade,UF".split(",");

        if (!this.isFirstRun()) {
            for (EntradaProduto ep__ : EntradaProdutoCTRL.BuscarPorFornecedor((int) spnrLimite.getValue(), txtConteudoPesquisa.getText())) {
                EP_.add(ep__);
            }
        }

        Object[][] dados = new Object[EP_.size()][colunas.length];
        for (int linha = 0; linha < EP_.size(); linha++) {
            int coluna = 0;
            dados[linha][coluna++] = EP_.get(linha).getId();
            dados[linha][coluna++] = EP_.get(linha).getData();
            dados[linha][coluna++]
                    = EP_.get(linha).getFornecedor().getRazaoSocial().trim().length() > 0
                    ? EP_.get(linha).getFornecedor().getRazaoSocial()
                    : EP_.get(linha).getFornecedor().getNomeFantasia();
            dados[linha][coluna++] = EP_.get(linha).getFornecedor().getCNPJ();
            dados[linha][coluna++] = EP_.get(linha).getFornecedor().getCidade();
            dados[linha][coluna++] = EP_.get(linha).getFornecedor().getUF();
        }
        DefaultTableModel mdl = new DefaultTableModel(dados, colunas) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        tblMain.setModel(mdl);
        tblMain.setAutoCreateRowSorter(true);
        tblMain.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblMain.setShowGrid(true);
        tblMain.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
}
